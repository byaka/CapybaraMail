{
   "_ast":null,
   "_obj":null,
   "attention":[],
   "authors":[],
   "copyright":"",
   "data":"api",
   "descr":"",
   "directive":[],
   "docstr":"",
   "example":[],
   "file":"/home/byaka/Sources/_active/CapybaraMail/docs/../api.py",
   "inherit":[],
   "license":"",
   "module":"",
   "name":"api",
   "note":[],
   "params":[],
   "return":"",
   "tree":{
      "classes":{
         "ApiAccount":{
            "_obj":null,
            "_return":{
               "descr":"Instance of class ApiAccount",
               "type":"instance"
            },
            "attention":[],
            "authors":[],
            "copyright":"",
            "data":"ApiAccount()",
            "descr":"",
            "directive":[],
            "docstr":"",
            "example":[],
            "file":"",
            "inherit":[
               "ApiBase"
            ],
            "license":"",
            "module":"api",
            "name":"ApiAccount",
            "note":[],
            "params":[],
            "return":"",
            "tree":{
               "classes":{},
               "classesOrder":[],
               "methods":{
                  "private":{},
                  "privateOrder":[],
                  "public":{
                     "accountAdd":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{
                              "avatar":null,
                              "connector":null,
                              "descr":null
                           },
                           "name":{
                              "avatar":4,
                              "connector":5,
                              "descr":3,
                              "login":1,
                              "password":2,
                              "self":0
                           },
                           "order":[
                              "self",
                              "login",
                              "password",
                              "descr",
                              "avatar",
                              "connector"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"accountAdd(login, password, descr=None, avatar=None, connector=None)",
                        "descr":"Add new account.",
                        "directive":[],
                        "docstr":"Add new account.\n\n:param str login: Login (name) of account. This also will ID of account. Can contain any letters - it will be normalized automatically.\n:param str password: Password for account.\n:param str|none descr: Description of account (defaults to None).\n:param str|none avatar: Encoded to base64 image (defaults to None).\n:param tuple|none connector: Config for connectors (defaults to None).",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"accountAdd",
                        "note":[],
                        "params":[
                           {
                              "descr":"Login (name) of account. This also will ID of account. Can contain any letters - it will be normalized automatically.",
                              "name":"login",
                              "type":"str"
                           },
                           {
                              "descr":"Password for account.",
                              "name":"password",
                              "type":"str"
                           },
                           {
                              "descr":"Description of account (defaults to None).",
                              "name":"descr",
                              "type":"str|none"
                           },
                           {
                              "descr":"Encoded to base64 image (defaults to None).",
                              "name":"avatar",
                              "type":"str|none"
                           },
                           {
                              "descr":"Config for connectors (defaults to None).",
                              "name":"connector",
                              "type":"tuple|none"
                           }
                        ],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     },
                     "connectorAdd":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{
                              "descr":null
                           },
                           "name":{
                              "config":4,
                              "descr":5,
                              "login":1,
                              "name":2,
                              "self":0,
                              "type":3
                           },
                           "order":[
                              "self",
                              "login",
                              "name",
                              "type",
                              "config",
                              "descr"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"connectorAdd(login, name, type, config, descr=None)",
                        "descr":"Add connector to account (usually connector needed for receive and send messages).",
                        "directive":[],
                        "docstr":"Add connector to account (usually connector needed for receive and send messages).\n\n:param str login: Login of account.\n:param str name: Connector's name, will be ID of connector.\n:param str type: Type of connector, this will be used for find correct connector.\n:param dict config: Parameters for connector.\n:param str|none descr: Description of new connector (defaults to None).",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"connectorAdd",
                        "note":[],
                        "params":[
                           {
                              "descr":"Login of account.",
                              "name":"login",
                              "type":"str"
                           },
                           {
                              "descr":"Connector's name, will be ID of connector.",
                              "name":"name",
                              "type":"str"
                           },
                           {
                              "descr":"Type of connector, this will be used for find correct connector.",
                              "name":"type",
                              "type":"str"
                           },
                           {
                              "descr":"Parameters for connector.",
                              "name":"config",
                              "type":"dict"
                           },
                           {
                              "descr":"Description of new connector (defaults to None).",
                              "name":"descr",
                              "type":"str|none"
                           }
                        ],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     },
                     "connectorList":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{},
                           "name":{
                              "self":0
                           },
                           "order":[
                              "self"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"connectorList()",
                        "descr":"List all supported connectors with format of configs (it contain fields with `name`, `type` and `required` mark).",
                        "directive":[],
                        "docstr":"List all supported connectors with format of configs (it contain fields with `name`, `type` and `required` mark).\n\n:return dict:",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"connectorList",
                        "note":[],
                        "params":[],
                        "return":{
                           "descr":"",
                           "type":"dict"
                        },
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     },
                     "connectorSwitch":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{
                              "to":null
                           },
                           "name":{
                              "login":1,
                              "name":2,
                              "self":0,
                              "to":3
                           },
                           "order":[
                              "self",
                              "login",
                              "name",
                              "to"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"connectorSwitch(login, name, to=None)",
                        "descr":"Switch active-status of specific connector.",
                        "directive":[],
                        "docstr":"Switch active-status of specific connector.\n\n:param str login: Login of account.\n:param str name: Name of connector.\n:param bool|none to: New active-status. If `None`, it will switched to opposite status (defaults to None).",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"connectorSwitch",
                        "note":[],
                        "params":[
                           {
                              "descr":"Login of account.",
                              "name":"login",
                              "type":"str"
                           },
                           {
                              "descr":"Name of connector.",
                              "name":"name",
                              "type":"str"
                           },
                           {
                              "descr":"New active-status. If `None`, it will switched to opposite status (defaults to None).",
                              "name":"to",
                              "type":"bool|none"
                           }
                        ],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     }
                  },
                  "publicOrder":[
                     "accountAdd",
                     "connectorAdd",
                     "connectorList",
                     "connectorSwitch"
                  ],
                  "special":{},
                  "specialOrder":[],
                  "undoc":{
                     "start":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{},
                           "name":{
                              "self":0
                           },
                           "order":[
                              "self"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"start(self, **kwargs)",
                        "descr":"",
                        "directive":[],
                        "docstr":"",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"start",
                        "note":[],
                        "params":[],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     }
                  },
                  "undocOrder":[
                     "start"
                  ]
               },
               "modules":{}
            },
            "type":"type",
            "ver_major":0,
            "ver_minor":0,
            "ver_patch":0,
            "ver_sub":"",
            "version":""
         },
         "ApiFilter":{
            "_obj":null,
            "_return":{
               "descr":"Instance of class ApiFilter",
               "type":"instance"
            },
            "attention":[],
            "authors":[],
            "copyright":"",
            "data":"ApiFilter()",
            "descr":"",
            "directive":[],
            "docstr":"",
            "example":[],
            "file":"",
            "inherit":[
               "ApiBase"
            ],
            "license":"",
            "module":"api",
            "name":"ApiFilter",
            "note":[],
            "params":[],
            "return":"",
            "tree":{
               "classes":{},
               "classesOrder":[],
               "methods":{
                  "private":{},
                  "privateOrder":[],
                  "public":{
                     "filterMessages":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{
                              "asDialogs":true,
                              "dates":null,
                              "limitDates":10,
                              "limitResults":10,
                              "query":null,
                              "returnFull":false
                           },
                           "name":{
                              "asDialogs":6,
                              "dates":2,
                              "limitDates":4,
                              "limitResults":5,
                              "login":1,
                              "query":3,
                              "returnFull":7,
                              "self":0
                           },
                           "order":[
                              "self",
                              "login",
                              "dates",
                              "query",
                              "limitDates",
                              "limitResults",
                              "asDialogs",
                              "returnFull"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"filterMessages(login, dates=None, query=None, limitDates=10, limitResults=10, asDialogs=True, returnFull=False)",
                        "descr":"Фильтрует сообщения по заданным критериям. Результаты группируются по датам.",
                        "directive":[],
                        "docstr":"Фильтрует сообщения по заданным критериям. Результаты группируются по датам.\n\n:param str login: Login of account.\n:param tuple|int|date|none dates: Дата или даты, за которые ведется поиск. Для передачи промежутков дат используйте синтаксис `(date1, '+1', date2)`, а для обратного порядка `(date1, '-1', date2)`. Также возможно использовать формат `(date1, '-1', True)` - это эквиваленто перебору дат начиная с указанной и вплоть до последней в базе. Второй аргумент в промежутках задает направление перебора и шаг. Допускается использовать одновременно и промежутки дат и обычное перечисление. Дата задается либо типом `date`, либо строкой в формате `yyyymmdd`, либо строкой-константой `today`, `yesterday`, либо через unixtimestamp (в этом случае информация о времени будет отброшена). Значение `None` эквивалетно `('today', '+1', True)` (defaults to None).\n:param dict query: Запрос, состоящий из вложенных словарей и списков. Элементы запроса имееют следующий формат: `{'or':[..]}` являющийся логическим оператором **или** (где в список вложены иные операторы), `{'and':[..]}` являющийся логическим оператором **и** и `{'key':'key_name', 'match':'==', 'value':'value'}` задающий условие фильтрации. Поддерживается фильтрация по следующим ключам: **from**, **to**, **label**. Для атрибута `match` допускается также значение `!=`, ознаающиее **не равно**.\n:param int limitDates: Ограничение на количество не пустых дней в результатах.\n:param int limitResults: Ограничение на количество сообщений (или диалогов при `asDialogs==True`) в результатах.\n:param bool asDialogs: Позволяет получать полностью диалоги вместо отдельных сообщений. При этом в результатах появится дополнительный массив с идентификаторами сообщений, непосредственно попавших под условия фильтрации.\n:param bool returnFull: Позволяет получить сообщения целиком, а не только их идентификаторы.\n:return list:\n\n:note:\n   Параметр limitResults не может разбить одну дату. Это значит, что если передать в него `10`, а в первой обработанной дате будет 100 писем - то все 100 вернутся в результат и поиск завершится.\n\n:example python:\n   {\n      'or':[\n         {'key':'label', 'value':'label1', 'match':'=='},\n         {'and':[\n            {'key':'label', 'value':'label2', 'match':'!='},\n            {'or':[\n               {'key':'from', 'value':'from1', 'match':'=='},\n               {'key':'from', 'value':'from2', 'match':'=='},\n               {'and':[\n                  {'key':'label', 'value':'label3', 'match':'!='},\n                  {'key':'from', 'value':'from3', 'match':'=='},\n               ]},\n               {'key':'label', 'value':'label4', 'match':'=='},\n            ]},\n         ]},\n         {'key':'from', 'value':'from4', 'match':'=='},\n         {'key':'from', 'value':'from5', 'match':'=='},\n      ]\n   }\n\n   # query matchs for this\n\n   msg.label == 'label1' or (\n      msg.label == 'label2' or(\n         msg.from == 'from1' or\n         msg.from == 'from2' or(\n            msg.label == 'label3' and msg.from == 'from3'\n         )\n      )\n   ) or\n   msg.from == 'from4' or\n   msg.from == 'from5'",
                        "example":[
                           {
                              "data":"{\n'or':[\n{'key':'label', 'value':'label1', 'match':'=='},\n{'and':[\n{'key':'label', 'value':'label2', 'match':'!='},\n{'or':[\n{'key':'from', 'value':'from1', 'match':'=='},\n{'key':'from', 'value':'from2', 'match':'=='},\n{'and':[\n{'key':'label', 'value':'label3', 'match':'!='},\n{'key':'from', 'value':'from3', 'match':'=='},\n]},\n{'key':'label', 'value':'label4', 'match':'=='},\n]},\n]},\n{'key':'from', 'value':'from4', 'match':'=='},\n{'key':'from', 'value':'from5', 'match':'=='},\n]\n}\n\n# query matchs for this\n\nmsg.label == 'label1' or (\nmsg.label == 'label2' or(\nmsg.from == 'from1' or\nmsg.from == 'from2' or(\nmsg.label == 'label3' and msg.from == 'from3'\n)\n)\n) or\nmsg.from == 'from4' or\nmsg.from == 'from5'",
                              "title":"",
                              "type":"python"
                           }
                        ],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"filterMessages",
                        "note":[
                           {
                              "data":"Параметр limitResults не может разбить одну дату. Это значит, что если передать в него `10`, а в первой обработанной дате будет 100 писем - то все 100 вернутся в результат и поиск завершится.\n",
                              "title":"",
                              "type":""
                           }
                        ],
                        "params":[
                           {
                              "descr":"Login of account.",
                              "name":"login",
                              "type":"str"
                           },
                           {
                              "descr":"Дата или даты, за которые ведется поиск. Для передачи промежутков дат используйте синтаксис `(date1, '+1', date2)`, а для обратного порядка `(date1, '-1', date2)`. Также возможно использовать формат `(date1, '-1', True)` - это эквиваленто перебору дат начиная с указанной и вплоть до последней в базе. Второй аргумент в промежутках задает направление перебора и шаг. Допускается использовать одновременно и промежутки дат и обычное перечисление. Дата задается либо типом `date`, либо строкой в формате `yyyymmdd`, либо строкой-константой `today`, `yesterday`, либо через unixtimestamp (в этом случае информация о времени будет отброшена). Значение `None` эквивалетно `('today', '+1', True)` (defaults to None).",
                              "name":"dates",
                              "type":"tuple|int|date|none"
                           },
                           {
                              "descr":"Запрос, состоящий из вложенных словарей и списков. Элементы запроса имееют следующий формат: `{'or':[..]}` являющийся логическим оператором **или** (где в список вложены иные операторы), `{'and':[..]}` являющийся логическим оператором **и** и `{'key':'key_name', 'match':'==', 'value':'value'}` задающий условие фильтрации. Поддерживается фильтрация по следующим ключам: **from**, **to**, **label**. Для атрибута `match` допускается также значение `!=`, ознаающиее **не равно**.",
                              "name":"query",
                              "type":"dict"
                           },
                           {
                              "descr":"Ограничение на количество не пустых дней в результатах.",
                              "name":"limitDates",
                              "type":"int"
                           },
                           {
                              "descr":"Ограничение на количество сообщений (или диалогов при `asDialogs==True`) в результатах.",
                              "name":"limitResults",
                              "type":"int"
                           },
                           {
                              "descr":"Позволяет получать полностью диалоги вместо отдельных сообщений. При этом в результатах появится дополнительный массив с идентификаторами сообщений, непосредственно попавших под условия фильтрации.",
                              "name":"asDialogs",
                              "type":"bool"
                           },
                           {
                              "descr":"Позволяет получить сообщения целиком, а не только их идентификаторы.",
                              "name":"returnFull",
                              "type":"bool"
                           }
                        ],
                        "return":{
                           "descr":"",
                           "type":"list"
                        },
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     }
                  },
                  "publicOrder":[
                     "filterMessages"
                  ],
                  "special":{},
                  "specialOrder":[],
                  "undoc":{
                     "start":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{},
                           "name":{
                              "self":0
                           },
                           "order":[
                              "self"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"start(self, **kwargs)",
                        "descr":"",
                        "directive":[],
                        "docstr":"",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"start",
                        "note":[],
                        "params":[],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     }
                  },
                  "undocOrder":[
                     "start"
                  ]
               },
               "modules":{}
            },
            "type":"type",
            "ver_major":0,
            "ver_minor":0,
            "ver_patch":0,
            "ver_sub":"",
            "version":""
         },
         "ApiLabel":{
            "_obj":null,
            "_return":{
               "descr":"Instance of class ApiLabel",
               "type":"instance"
            },
            "attention":[],
            "authors":[],
            "copyright":"",
            "data":"ApiLabel()",
            "descr":"",
            "directive":[],
            "docstr":"",
            "example":[],
            "file":"",
            "inherit":[
               "ApiBase"
            ],
            "license":"",
            "module":"api",
            "name":"ApiLabel",
            "note":[],
            "params":[],
            "return":"",
            "tree":{
               "classes":{},
               "classesOrder":[],
               "methods":{
                  "private":{},
                  "privateOrder":[],
                  "public":{
                     "labelAdd":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{
                              "color":null,
                              "descr":null
                           },
                           "name":{
                              "color":4,
                              "descr":3,
                              "label":2,
                              "login":1,
                              "self":0
                           },
                           "order":[
                              "self",
                              "login",
                              "label",
                              "descr",
                              "color"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"labelAdd(login, label, descr=None, color=None)",
                        "descr":"Add new label to account.",
                        "directive":[],
                        "docstr":"Add new label to account.\n\n:param str login: Login of account.\n:param str|tuple label: Label name or full ierarchy of names (for nested labels).\n:param str|none descr: Description for label (defaults to None).\n:param str|none color: Any representation of color (defaults to None).\n\n:note:\n   If you want to work with nested label - pass tuple of ierarchy or join it with `/` and pass like string.",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"labelAdd",
                        "note":[
                           {
                              "data":"If you want to work with nested label - pass tuple of ierarchy or join it with `/` and pass like string.",
                              "title":"",
                              "type":""
                           }
                        ],
                        "params":[
                           {
                              "descr":"Login of account.",
                              "name":"login",
                              "type":"str"
                           },
                           {
                              "descr":"Label name or full ierarchy of names (for nested labels).",
                              "name":"label",
                              "type":"str|tuple"
                           },
                           {
                              "descr":"Description for label (defaults to None).",
                              "name":"descr",
                              "type":"str|none"
                           },
                           {
                              "descr":"Any representation of color (defaults to None).",
                              "name":"color",
                              "type":"str|none"
                           }
                        ],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     },
                     "labelEdit":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{
                              "color":null,
                              "descr":null
                           },
                           "name":{
                              "color":4,
                              "descr":3,
                              "label":2,
                              "login":1,
                              "self":0
                           },
                           "order":[
                              "self",
                              "login",
                              "label",
                              "descr",
                              "color"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"labelEdit(login, label, descr=None, color=None)",
                        "descr":"Edit existed label in account.",
                        "directive":[],
                        "docstr":"Edit existed label in account.\n\n:param str login: Login of account.\n:param str|tuple label: Label name or full ierarchy of names (for nested labels).\n:param str|none descr: Description for label (defaults to None).\n:param str|none color: Any representation of color (defaults to None).\n\n:note:\n   If you want to work with nested label - pass tuple of ierarchy or join it with `/` and pass like string.",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"labelEdit",
                        "note":[
                           {
                              "data":"If you want to work with nested label - pass tuple of ierarchy or join it with `/` and pass like string.",
                              "title":"",
                              "type":""
                           }
                        ],
                        "params":[
                           {
                              "descr":"Login of account.",
                              "name":"login",
                              "type":"str"
                           },
                           {
                              "descr":"Label name or full ierarchy of names (for nested labels).",
                              "name":"label",
                              "type":"str|tuple"
                           },
                           {
                              "descr":"Description for label (defaults to None).",
                              "name":"descr",
                              "type":"str|none"
                           },
                           {
                              "descr":"Any representation of color (defaults to None).",
                              "name":"color",
                              "type":"str|none"
                           }
                        ],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     },
                     "labelList":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{
                              "byDialog":true,
                              "countAll":true,
                              "countWithLabel":false
                           },
                           "name":{
                              "byDialog":4,
                              "countAll":2,
                              "countWithLabel":3,
                              "login":1,
                              "self":0
                           },
                           "order":[
                              "self",
                              "login",
                              "countAll",
                              "countWithLabel",
                              "byDialog"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"labelList(login, countAll=True, countWithLabel=False, byDialog=True)",
                        "descr":"List all labels, also count messages or dialogs in each.",
                        "directive":[],
                        "docstr":"List all labels, also count messages or dialogs in each.\n\n:param str login: Login of account.\n:param bool countAll: Enable counting of messages or dialogs (defaults to True).\n:param list countWithLabel: Count messages that also have this label (defaults to False).\n:param bool byDialog: Count dialogs or messages (defaults to True).\n:return tuple:\n\n:note:\n   As labels may be nested, in this case there name will be joined with `/` and pass like this.\n\n:note:\n   Parents not counts items in children.\n\n:note:\n   This method don't shows labels with `special==True`.\n\n:example python:\n   >>> api.labelList('user1', countAll=True, countWithLabel=['unread'])\n   ... (\n      {'name':'Label 1', 'descr':'Just non-nested label', 'color':'red', 'countAll':0, 'countWithLabel':{'unread':0}},\n      {'name':'Label 1/Label 2', 'descr':'Just nested label', 'color':'#fff', 'countAll':10, 'countWithLabel':{'unread':10}},\n      {'name':'Label 1/Label 2/Label 3', 'descr':'We need to go deeper', 'color':'green', 'countAll':100, 'countWithLabel':{'unread':3}},\n\n   )",
                        "example":[
                           {
                              "data":">>> api.labelList('user1', countAll=True, countWithLabel=['unread'])\n... (\n{'name':'Label 1', 'descr':'Just non-nested label', 'color':'red', 'countAll':0, 'countWithLabel':{'unread':0}},\n{'name':'Label 1/Label 2', 'descr':'Just nested label', 'color':'#fff', 'countAll':10, 'countWithLabel':{'unread':10}},\n{'name':'Label 1/Label 2/Label 3', 'descr':'We need to go deeper', 'color':'green', 'countAll':100, 'countWithLabel':{'unread':3}},\n\n)",
                              "title":"",
                              "type":"python"
                           }
                        ],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"labelList",
                        "note":[
                           {
                              "data":"As labels may be nested, in this case there name will be joined with `/` and pass like this.\n",
                              "title":"",
                              "type":""
                           },
                           {
                              "data":"Parents not counts items in children.\n",
                              "title":"",
                              "type":""
                           },
                           {
                              "data":"This method don't shows labels with `special==True`.\n",
                              "title":"",
                              "type":""
                           }
                        ],
                        "params":[
                           {
                              "descr":"Login of account.",
                              "name":"login",
                              "type":"str"
                           },
                           {
                              "descr":"Enable counting of messages or dialogs (defaults to True).",
                              "name":"countAll",
                              "type":"bool"
                           },
                           {
                              "descr":"Count messages that also have this label (defaults to False).",
                              "name":"countWithLabel",
                              "type":"list"
                           },
                           {
                              "descr":"Count dialogs or messages (defaults to True).",
                              "name":"byDialog",
                              "type":"bool"
                           }
                        ],
                        "return":{
                           "descr":"",
                           "type":"tuple"
                        },
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     },
                     "labelMark":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{
                              "andClear":false
                           },
                           "name":{
                              "andClear":4,
                              "label":3,
                              "login":1,
                              "msg":2,
                              "self":0
                           },
                           "order":[
                              "self",
                              "login",
                              "msg",
                              "label",
                              "andClear"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"labelMark(login, msg, label, andClear=False)",
                        "descr":"Mark message with specific label(s) and optionally clear other labels from it.",
                        "directive":[],
                        "docstr":"Mark message with specific label(s) and optionally clear other labels from it.\n\n:param str login: Login of account.\n:param str msg: Message's id.\n:param str|list|tuple|none label: Label's ids or `None`.\n:param bool andClear: Also clear all other labels (defaults to False).\n\n:note:\n   If you want to work with nested label - pass tuple of ierarchy or join it with `/` and pass like string.",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"labelMark",
                        "note":[
                           {
                              "data":"If you want to work with nested label - pass tuple of ierarchy or join it with `/` and pass like string.",
                              "title":"",
                              "type":""
                           }
                        ],
                        "params":[
                           {
                              "descr":"Login of account.",
                              "name":"login",
                              "type":"str"
                           },
                           {
                              "descr":"Message's id.",
                              "name":"msg",
                              "type":"str"
                           },
                           {
                              "descr":"Label's ids or `None`.",
                              "name":"label",
                              "type":"str|list|tuple|none"
                           },
                           {
                              "descr":"Also clear all other labels (defaults to False).",
                              "name":"andClear",
                              "type":"bool"
                           }
                        ],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     },
                     "labelUnmark":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{},
                           "name":{
                              "label":3,
                              "login":1,
                              "msg":2,
                              "self":0
                           },
                           "order":[
                              "self",
                              "login",
                              "msg",
                              "label"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"labelUnmark(login, msg, label)",
                        "descr":"Remove specific label(s) from message.",
                        "directive":[],
                        "docstr":"Remove specific label(s) from message.\n\n:param str login: Login of account.\n:param str msg: Message's id.\n:param str|list|tuple|none label: Label's ids or `None`.\n\n:note:\n   If you want to work with nested label - pass tuple of ierarchy or join it with `/` and pass like string.",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"labelUnmark",
                        "note":[
                           {
                              "data":"If you want to work with nested label - pass tuple of ierarchy or join it with `/` and pass like string.",
                              "title":"",
                              "type":""
                           }
                        ],
                        "params":[
                           {
                              "descr":"Login of account.",
                              "name":"login",
                              "type":"str"
                           },
                           {
                              "descr":"Message's id.",
                              "name":"msg",
                              "type":"str"
                           },
                           {
                              "descr":"Label's ids or `None`.",
                              "name":"label",
                              "type":"str|list|tuple|none"
                           }
                        ],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     }
                  },
                  "publicOrder":[
                     "labelList",
                     "labelAdd",
                     "labelEdit",
                     "labelMark",
                     "labelUnmark"
                  ],
                  "special":{},
                  "specialOrder":[],
                  "undoc":{
                     "start":{
                        "_obj":null,
                        "argsRaw":{
                           "defValue":{},
                           "name":{
                              "self":0
                           },
                           "order":[
                              "self"
                           ]
                        },
                        "attention":[],
                        "authors":[],
                        "copyright":"",
                        "data":"start(self, **kwargs)",
                        "descr":"",
                        "directive":[],
                        "docstr":"",
                        "example":[],
                        "file":"",
                        "inherit":[],
                        "license":"",
                        "module":"api",
                        "name":"start",
                        "note":[],
                        "params":[],
                        "return":"",
                        "type":"instancemethod",
                        "ver_major":0,
                        "ver_minor":0,
                        "ver_patch":0,
                        "ver_sub":"",
                        "version":""
                     }
                  },
                  "undocOrder":[
                     "start"
                  ]
               },
               "modules":{}
            },
            "type":"type",
            "ver_major":0,
            "ver_minor":0,
            "ver_patch":0,
            "ver_sub":"",
            "version":""
         }
      },
      "classesOrder":[
         "ApiAccount",
         "ApiLabel",
         "ApiFilter"
      ],
      "methods":{
         "private":{},
         "privateOrder":[],
         "public":{},
         "publicOrder":[],
         "special":{},
         "specialOrder":[],
         "undoc":{},
         "undocOrder":[]
      },
      "modules":{}
   },
   "type":"module",
   "ver_major":0,
   "ver_minor":0,
   "ver_patch":0,
   "ver_sub":"",
   "version":""
}